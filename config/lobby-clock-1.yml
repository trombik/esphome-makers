---

substitutions:
  myname: lobby-clock-1
  location: lobby

esphome:
  name: ${myname}
  on_boot:
    # read time from RTC before WiFi starts so that the display shows the time
    # even when WiFi is not available. any value more than 200.0 (before WiFi)
    # should work.
    priority: 600.0
    then:
      ds1302.read_time:

esp8266:
  board: d1_mini

logger:
  level: debug

api:
  password: !secret api_password

debug:
  update_interval: 5s

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

external_components:
  - source:
      type: git
      url: https://github.com/trombik/esphome-component-ds1302
    components:
      - ds1302

time:
  - platform: ds1302
    id: ds1302_time
    cs_pin: D8
    dio_pin: D7
    clk_pin: D5
    update_interval: never

  - platform: sntp
    id: sntp_time
    on_time_sync:
      then:
        ds1302.write_time:

display:
  platform: tm1637
  clk_pin: D1
  dio_pin: D2
  length: 4
  update_interval: 500ms
  intensity: 5
  lambda: |-
    static int i = 0;
    i++;
    if ((i % 2) == 0) {
      it.strftime("%H.%M", id(ds1302_time).now());
    } else {
      it.strftime("%H%M", id(ds1302_time).now());
    }

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ESP IP Address ${myname}
    ssid:
      name: ESP Connected SSID ${myname}
    bssid:
      name: ESP Connected BSSID ${myname}
    mac_address:
      name: ESP Mac Wifi Address ${myname}
    scan_results:
      name: ESP Latest Scan Results ${myname}

sensor:
  - platform: wifi_signal
    name: "WiFi Signal Sensor ${myname}"
    update_interval: 60s

  - platform: uptime
    name: Uptime Sensor ${myname}

status_led:
  pin:
    number: D4
    inverted: yes

button:
  - platform: restart
    name: "Restart ${myname}"
