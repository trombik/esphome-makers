---

substitutions:
  myname: 501-sensor-ping
  location: "501"
  influxdb_host: !secret influxdb_host
  influxdb_port: !secret influxdb_port
  influxdb_database: network
  influxdb_user: !secret influxdb_user
  influxdb_password: !secret influxdb_password
  influxdb_scheme: !secret influxdb_scheme
  target_ip_address: 8.8.8.8

esphome:
  name: ${myname}
  libraries:
    - ESP8266WiFi
    - https://github.com/akaJes/AsyncPing#95ac7e4

esp8266:
  board: nodemcuv2

logger:
  level: debug

api:
  password: !secret api_password

debug:
  update_interval: 5s

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

globals:
  - id: buf
    type: char[512]
    restore_value: no
    initial_value: ""

external_components:
  - source:
      type: git
      url: https://github.com/trombik/esphome-component-ping
      ref: main

http_request:
  useragent: esphome/${myname}
  timeout: 10s

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ESP IP Address ${myname}
    ssid:
      name: ESP Connected SSID ${myname}
    bssid:
      name: ESP Connected BSSID ${myname}
    mac_address:
      name: ESP Mac Wifi Address ${myname}
    scan_results:
      name: ESP Latest Scan Results ${myname}

sensor:
  - platform: wifi_signal
    name: "WiFi Signal Sensor ${myname}"
    update_interval: 60s
    id: signal
    on_value:
      then:
        - http_request.post:
            url: "${influxdb_scheme}://${influxdb_host}:${influxdb_port}/write?db=${influxdb_database}&u=${influxdb_user}&p=${influxdb_password}"
            body: !lambda |-
              snprintf(id(buf), sizeof(id(buf)), "wifi,location=${location},host=${myname} wifi_signal=%d", (int)id(signal).state);
              return id(buf);

  - platform: uptime
    name: Uptime Sensor ${myname}
    update_interval: 60s

  - platform: ping
    ip_address: ${target_ip_address}
    num_attempts: 17
    timeout: 1sec
    loss:
      name: Packet loss
      id: loss
      on_value:
        then:
          - http_request.post:
              url: "${influxdb_scheme}://${influxdb_host}:${influxdb_port}/write?db=${influxdb_database}&u=${influxdb_user}&p=${influxdb_password}"
              body: !lambda |-
                snprintf(id(buf), sizeof(id(buf)), "ping,location=${location},host=${myname},url=${target_ip_address} percent_packet_loss=%0.1f", id(loss).state);
                return id(buf);
    latency:
      name: Latency
      accuracy_decimals: 3
      id: latency
      on_value:
        then:
          - http_request.post:
              url: "${influxdb_scheme}://${influxdb_host}:${influxdb_port}/write?db=${influxdb_database}&u=${influxdb_user}&p=${influxdb_password}"
              body: !lambda |-
                snprintf(id(buf), sizeof(id(buf)), "ping,location=${location},host=${myname},url=${target_ip_address} average_response_ms=%0.1f", id(latency).state * 1000);
                return id(buf);
